{"version":3,"sources":["components/Wrapper/index.js","components/Jumbotron/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Jumbotron","Card","alt","name","src","image","id","onClick","handleImageClick","App","state","Friends","score","highScore","ids","showFriends","_this","setState","handleIncrement","console","log","highScoreUpdate","resetGame","friends","shuffleFriends","includes","push","i","length","j","Math","floor","random","tempValue","_this2","this","components_Wrapper","components_Jumbotron","map","Friend","Cards","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gCAOeA,SAJC,SAAAC,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCU1BC,SAXG,WAChB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,+BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,4GCGOG,MARf,SAAcP,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,GAAIZ,EAAMY,GAAIC,QAAU,kBAAMb,EAAMc,iBAAiBd,EAAMY,gBCyE5FG,oNAtEbC,MAAQ,CAACC,UACTC,MAAO,EACPC,UAAW,EACXC,IAAK,MAELC,YAAc,WACZC,EAAKC,SAAS,CAACN,eAGjBO,gBAAkB,WAChBF,EAAKC,SAAS,CAAEL,MAAOI,EAAKN,MAAME,MAAQ,IAC1CO,QAAQC,IAAIJ,EAAKN,MAAME,UAGzBS,gBAAkB,WACbL,EAAKN,MAAME,OAASI,EAAKN,MAAMG,UAChCG,EAAKC,SAAS,CAACJ,UAAWG,EAAKN,MAAME,QAErCI,EAAKC,SAAS,CAACL,MAAO,OAI1BU,UAAa,WACXN,EAAKC,SAAS,CAAEL,MAAO,IACvBI,EAAKC,SAAS,CAAEH,IAAK,QAGvBN,iBAAmB,SAACF,GACpBU,EAAKC,SAAS,CAACM,QAASP,EAAKQ,eAAeb,KAC5CQ,QAAQC,IAAId,GAERU,EAAKN,MAAMI,IAAIW,SAASnB,IAI1BU,EAAKM,YACLN,EAAKK,oBAJNL,EAAKN,MAAMI,IAAIY,KAAKpB,GACnBU,EAAKE,sBAOPM,eAAiB,SAAAb,GAEf,IADA,IAAIgB,EAAIhB,EAAQiB,OAAQ,EACjBD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAYtB,EAAQgB,GAC1BhB,EAAQgB,GAAKhB,EAAQkB,GACrBlB,EAAQkB,GAAKI,EACbN,IAEF,OAAOhB,2EAGF,IAAAuB,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,MACF1C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8BqC,KAAKzB,MAAME,MAAzC,mBAAgEuB,KAAKzB,MAAMG,UAA3E,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACfqC,KAAKzB,MAAMC,QAAQ2B,IAAI,SAAAC,GAAM,OAAI5C,EAAAC,EAAAC,cAAC2C,EAAD,CAChClC,GAAIiC,EAAOjC,GACXH,KAAMoC,EAAOpC,KACbE,MAAOkC,EAAOlC,MACdG,iBAAkB0B,EAAK1B,8BA/DbiC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfcb38b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Wrapper = props => {\r\n  return <div className='wrapper'>{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <nav className='jumbotron jumbotron-fluid'>\r\n      <div className='container'>\r\n        <h1 className='display-4'>STRANGER THINGS MEMORY GAME</h1>\r\n        <p className='lead'>Start clicking images to earn points! The game ends if you click the same image more than once</p>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className='card'>\r\n        <img alt={props.name} src={props.image} id={props.id} onClick={ () => props.handleImageClick(props.id)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport Jumbotron from './components/Jumbotron';\nimport Cards from './components/Cards';\nimport Friends from \"./ImageData.json\";\nimport \"./App.css\";\n\n// Game functionality\nclass App extends React.Component {\n  state = {Friends,\n  score: 0,\n  highScore: 0,\n  ids: []}\n\n  showFriends = () => {\n    this.setState({Friends});\n  };\n\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n    console.log(this.state.score);\n  };\n  \n  highScoreUpdate = () => {\n    if(this.state.score >= this.state.highScore) {\n      this.setState({highScore: this.state.score});\n    } else {\n      this.setState({score: 0});\n    }\n  };\n  \n  resetGame =  () => {\n    this.setState({ score: 0});\n    this.setState({ ids: [] });\n  }\n  \n  handleImageClick = (id) => {\n  this.setState({friends: this.shuffleFriends(Friends) })\n  console.log(id);\n\n  if(!this.state.ids.includes(id)) {\n   this.state.ids.push(id);\n    this.handleIncrement();\n  } else{\n    this.resetGame();\n    this.highScoreUpdate();\n  }\n  }\n\n  shuffleFriends = Friends => {\n    let i = Friends.length -1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempValue = Friends[i];\n      Friends[i] = Friends[j];\n      Friends[j] = tempValue;\n      i--;\n    }\n    return Friends\n  }\n\nrender() {\n  return (\n    <Wrapper>\n      <Jumbotron />\n    <h2 className='score'>SCORE: {this.state.score}  | HIGH SCORE: {this.state.highScore} </h2> \n      <div className= 'grid-container'>\n      {this.state.Friends.map(Friend =>(<Cards\n        id={Friend.id}\n        name={Friend.name}\n        image={Friend.image}\n        handleImageClick={this.handleImageClick}\n      />))}\n      </div>\n    </Wrapper>\n  );\n  }}\n\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}